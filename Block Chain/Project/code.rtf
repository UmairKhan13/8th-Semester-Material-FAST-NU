{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pragma solidity >=0.4.22 <0.6.0;\
\
contract auction\{\
    \
    //event for printing bids\
    event reviewEachBidsLogger(address _bidderAddress, uint _bidderValue);\
    \
    //event for printing loadBiddingDetailsForBidders\
    event showBiddingDetailsForBidders(string autionStatement, uint biddingTime);\
    \
    //Government Initial Operations\
    string public autionStatement;\
    address public governmentAddress;\
    uint biddingNumber;\
    \
    //Highest Bid\
    address public highestBidderAddress;\
    uint public highestBidValue;\
    \
    \
    //Time Operations\
    bool public biddingPeriodActivated;\
    uint public biddingTimeStart;\
    uint public biddingDuration;\
    \
    //Bids\
    address[] public bidsAddresses;\
    uint[] public bidsValues;\
    \
    \
    constructor(\
        uint _biddingNumber,\
        string memory _autionStatement,\
        uint _biddingDuration) public\
    \{\
        biddingNumber = _biddingNumber;\
        autionStatement = _autionStatement;\
        biddingDuration = _biddingDuration;\
    \}\
\
    //Check is biddingPeriodActivated\
    function checkIsTimeExpires() public \
    \{\
        if(now > biddingTimeStart + biddingDuration)\
        \{\
            //period is over\
            biddingPeriodActivated = false;\
        \}\
        else\{\
            //bidding in progress\
            biddingPeriodActivated = true;\
        \}\
    \}\
    \
    //Bidder loads bids \
    function loadBiddingDetailsForBidders() public\
    \{\
        checkIsTimeExpires();\
        if(biddingPeriodActivated)\
        \{\
            emit showBiddingDetailsForBidders(autionStatement, biddingTimeStart + biddingDuration);\
        \}\
    \}\
\
  //Set each bids if bidding period is active\
    function setBid(address _bidderAddress, uint _bidderValue) public \
    \{\
        checkIsTimeExpires();\
        if(!biddingPeriodActivated)\
        \{\
            bidsAddresses[bidsAddresses.length] = _bidderAddress;\
            bidsValues[bidsValues.length] = _bidderValue;\
        \}\
    \}\
\
    //Government review Bids if biddingPeriodActivated is false \
    function reviewBids() public\
    \{\
        checkIsTimeExpires();\
        if(!biddingPeriodActivated)\
        \{\
            for(uint i=0; i<bidsAddresses.length; i++)\
            \{\
               emit reviewEachBidsLogger(bidsAddresses[i], bidsValues[i]);\
            \}\
        \}\
    \}\
    \
    //Goverment publish results\
    function pushResults(address _highestBidderAddress, uint _highestBidValue) public\{\
        highestBidderAddress = _highestBidderAddress;\
        highestBidValue = _highestBidValue;\
    \}\
    \
    //People Review Winner Address\
    function getHighestBidderAddress() public returns (address)\
    \{\
        checkIsTimeExpires();\
        if(!biddingPeriodActivated)\
        \{\
            return highestBidderAddress;\
        \}\
    \}\
    \
    //People Review Winner Uint\
    function getHighestBidderValue() public returns (uint)\
    \{\
        checkIsTimeExpires();\
        if(!biddingPeriodActivated)\
        \{\
            return highestBidValue;\
        \}\
    \}\
\}}